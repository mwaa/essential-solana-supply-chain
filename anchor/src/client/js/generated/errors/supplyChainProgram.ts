/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  isProgramError,
  type Address,
  type SOLANA_ERROR__INSTRUCTION_ERROR__CUSTOM,
  type SolanaError,
} from 'gill';
import { SUPPLY_CHAIN_PROGRAM_PROGRAM_ADDRESS } from '../programs';

/** InvalidSerialNumber: Invalid serial number: must be 1-50 characters */
export const SUPPLY_CHAIN_PROGRAM_ERROR__INVALID_SERIAL_NUMBER = 0x1770; // 6000
/** InvalidDescription: Invalid description: must be 1-200 characters */
export const SUPPLY_CHAIN_PROGRAM_ERROR__INVALID_DESCRIPTION = 0x1771; // 6001
/** UnauthorizedAccess: Unauthorized access */
export const SUPPLY_CHAIN_PROGRAM_ERROR__UNAUTHORIZED_ACCESS = 0x1772; // 6002
/** CounterOverflow: Counter overflow */
export const SUPPLY_CHAIN_PROGRAM_ERROR__COUNTER_OVERFLOW = 0x1773; // 6003
/** InvalidStageName: Invalid stage name: must be 1-50 characters */
export const SUPPLY_CHAIN_PROGRAM_ERROR__INVALID_STAGE_NAME = 0x1774; // 6004
/** TooManyStages: Too many stages: maximum 10 stages allowed */
export const SUPPLY_CHAIN_PROGRAM_ERROR__TOO_MANY_STAGES = 0x1775; // 6005
/** NoStages: No stages defined */
export const SUPPLY_CHAIN_PROGRAM_ERROR__NO_STAGES = 0x1776; // 6006
/** InvalidStageIndex: Invalid stage index */
export const SUPPLY_CHAIN_PROGRAM_ERROR__INVALID_STAGE_INDEX = 0x1777; // 6007
/** StageNotCompleted: Current stage not completed */
export const SUPPLY_CHAIN_PROGRAM_ERROR__STAGE_NOT_COMPLETED = 0x1778; // 6008
/** ProductAlreadyDelivered: Product already delivered */
export const SUPPLY_CHAIN_PROGRAM_ERROR__PRODUCT_ALREADY_DELIVERED = 0x1779; // 6009

export type SupplyChainProgramError =
  | typeof SUPPLY_CHAIN_PROGRAM_ERROR__COUNTER_OVERFLOW
  | typeof SUPPLY_CHAIN_PROGRAM_ERROR__INVALID_DESCRIPTION
  | typeof SUPPLY_CHAIN_PROGRAM_ERROR__INVALID_SERIAL_NUMBER
  | typeof SUPPLY_CHAIN_PROGRAM_ERROR__INVALID_STAGE_INDEX
  | typeof SUPPLY_CHAIN_PROGRAM_ERROR__INVALID_STAGE_NAME
  | typeof SUPPLY_CHAIN_PROGRAM_ERROR__NO_STAGES
  | typeof SUPPLY_CHAIN_PROGRAM_ERROR__PRODUCT_ALREADY_DELIVERED
  | typeof SUPPLY_CHAIN_PROGRAM_ERROR__STAGE_NOT_COMPLETED
  | typeof SUPPLY_CHAIN_PROGRAM_ERROR__TOO_MANY_STAGES
  | typeof SUPPLY_CHAIN_PROGRAM_ERROR__UNAUTHORIZED_ACCESS;

let supplyChainProgramErrorMessages:
  | Record<SupplyChainProgramError, string>
  | undefined;
if (process.env.NODE_ENV !== 'production') {
  supplyChainProgramErrorMessages = {
    [SUPPLY_CHAIN_PROGRAM_ERROR__COUNTER_OVERFLOW]: `Counter overflow`,
    [SUPPLY_CHAIN_PROGRAM_ERROR__INVALID_DESCRIPTION]: `Invalid description: must be 1-200 characters`,
    [SUPPLY_CHAIN_PROGRAM_ERROR__INVALID_SERIAL_NUMBER]: `Invalid serial number: must be 1-50 characters`,
    [SUPPLY_CHAIN_PROGRAM_ERROR__INVALID_STAGE_INDEX]: `Invalid stage index`,
    [SUPPLY_CHAIN_PROGRAM_ERROR__INVALID_STAGE_NAME]: `Invalid stage name: must be 1-50 characters`,
    [SUPPLY_CHAIN_PROGRAM_ERROR__NO_STAGES]: `No stages defined`,
    [SUPPLY_CHAIN_PROGRAM_ERROR__PRODUCT_ALREADY_DELIVERED]: `Product already delivered`,
    [SUPPLY_CHAIN_PROGRAM_ERROR__STAGE_NOT_COMPLETED]: `Current stage not completed`,
    [SUPPLY_CHAIN_PROGRAM_ERROR__TOO_MANY_STAGES]: `Too many stages: maximum 10 stages allowed`,
    [SUPPLY_CHAIN_PROGRAM_ERROR__UNAUTHORIZED_ACCESS]: `Unauthorized access`,
  };
}

export function getSupplyChainProgramErrorMessage(
  code: SupplyChainProgramError
): string {
  if (process.env.NODE_ENV !== 'production') {
    return (
      supplyChainProgramErrorMessages as Record<SupplyChainProgramError, string>
    )[code];
  }

  return 'Error message not available in production bundles.';
}

export function isSupplyChainProgramError<
  TProgramErrorCode extends SupplyChainProgramError,
>(
  error: unknown,
  transactionMessage: {
    instructions: Record<number, { programAddress: Address }>;
  },
  code?: TProgramErrorCode
): error is SolanaError<typeof SOLANA_ERROR__INSTRUCTION_ERROR__CUSTOM> &
  Readonly<{ context: Readonly<{ code: TProgramErrorCode }> }> {
  return isProgramError<TProgramErrorCode>(
    error,
    transactionMessage,
    SUPPLY_CHAIN_PROGRAM_PROGRAM_ADDRESS,
    code
  );
}
