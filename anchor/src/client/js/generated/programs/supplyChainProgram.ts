/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  containsBytes,
  fixEncoderSize,
  getBytesEncoder,
  type Address,
  type ReadonlyUint8Array,
} from 'gill';
import {
  type ParsedCompleteStageInstruction,
  type ParsedInitializeProductInstruction,
  type ParsedLogEventInstruction,
  type ParsedTransferOwnershipInstruction,
} from '../instructions';

export const SUPPLY_CHAIN_PROGRAM_PROGRAM_ADDRESS =
  'AiNohysKLFRjwxjsw4Rmg5t5vm6R9wEL6qQxjDtuxfcc' as Address<'AiNohysKLFRjwxjsw4Rmg5t5vm6R9wEL6qQxjDtuxfcc'>;

export enum SupplyChainProgramAccount {
  Product,
  SupplyChainEvent,
}

export function identifySupplyChainProgramAccount(
  account: { data: ReadonlyUint8Array } | ReadonlyUint8Array
): SupplyChainProgramAccount {
  const data = 'data' in account ? account.data : account;
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([102, 76, 55, 251, 38, 73, 224, 229])
      ),
      0
    )
  ) {
    return SupplyChainProgramAccount.Product;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([211, 55, 255, 36, 84, 248, 218, 52])
      ),
      0
    )
  ) {
    return SupplyChainProgramAccount.SupplyChainEvent;
  }
  throw new Error(
    'The provided account could not be identified as a supplyChainProgram account.'
  );
}

export enum SupplyChainProgramInstruction {
  CompleteStage,
  InitializeProduct,
  LogEvent,
  TransferOwnership,
}

export function identifySupplyChainProgramInstruction(
  instruction: { data: ReadonlyUint8Array } | ReadonlyUint8Array
): SupplyChainProgramInstruction {
  const data = 'data' in instruction ? instruction.data : instruction;
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([14, 56, 73, 109, 170, 85, 63, 218])
      ),
      0
    )
  ) {
    return SupplyChainProgramInstruction.CompleteStage;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([251, 245, 7, 123, 247, 50, 14, 2])
      ),
      0
    )
  ) {
    return SupplyChainProgramInstruction.InitializeProduct;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([5, 9, 90, 141, 223, 134, 57, 217])
      ),
      0
    )
  ) {
    return SupplyChainProgramInstruction.LogEvent;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([65, 177, 215, 73, 53, 45, 99, 47])
      ),
      0
    )
  ) {
    return SupplyChainProgramInstruction.TransferOwnership;
  }
  throw new Error(
    'The provided instruction could not be identified as a supplyChainProgram instruction.'
  );
}

export type ParsedSupplyChainProgramInstruction<
  TProgram extends string = 'AiNohysKLFRjwxjsw4Rmg5t5vm6R9wEL6qQxjDtuxfcc',
> =
  | ({
      instructionType: SupplyChainProgramInstruction.CompleteStage;
    } & ParsedCompleteStageInstruction<TProgram>)
  | ({
      instructionType: SupplyChainProgramInstruction.InitializeProduct;
    } & ParsedInitializeProductInstruction<TProgram>)
  | ({
      instructionType: SupplyChainProgramInstruction.LogEvent;
    } & ParsedLogEventInstruction<TProgram>)
  | ({
      instructionType: SupplyChainProgramInstruction.TransferOwnership;
    } & ParsedTransferOwnershipInstruction<TProgram>);
